{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","constants.js","Containers/App.js","action.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","CardComponent","map","user","i","SearchBox","searchfeild","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOT_PENDING","REQUEST_ROBOT_SUCCESS","REQUEST_ROBOT_FAILED","connect","searchfield","searchRobots","requestRobots","isPending","dispatch","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eac61543.chunk.js","sourcesContent":["import React from 'react';\nconst Card = ({name,email,id}) => {\n\treturn (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?100x100`} alt=\"user robot\" />\n      <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n      </div>\n      </div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\nconst CardComponent = robots.map((user,i) => {\n\treturn (\n\t\t<Card \n\t\tkey={i} \n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\temail={robots[i].email} \n\t\t/>\n\t\t);\n})\t\n\treturn (\n\t\t<div>\n   {CardComponent}\n    </div> \n\t\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfeild, onSearchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t<input \n\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \n\t\ttype=\"search\" \n\t\tplaceholder=\"search robots\" \n\t\tonChange={onSearchChange}/>\n\t\t</div>\n\t\t);\n}\n\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll' , border: '1px solid black' , height: '800px'}}>\n      {props.children}\n      </div>\n\t\t);\n};\n\nexport default Scroll;","import React , {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info) {\n\t\tthis.setState({hasError:true})\n\t}\n\n\trender() {\n         if (this.state.hasError) {\n         \treturn <h1>Oooops. That is not good</h1> \n         }\n         return this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';\n","import React, { useState, useEffect } from 'react';\nimport CardList from './../Components/CardList';\nimport SearchBox from './../Components/SearchBox';\nimport Scroll from './../Components/Scroll';\nimport ErrorBoundry from './../Components/ErrorBoundry';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { requestRobots, setSearchfield } from '../action';\n\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchfield: state.searchRobots.searchfield,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error,\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\n\n\nfunction App({ searchfield, onSearchChange, onRequestRobots, robots, isPending, error }) {\n\n\tuseEffect(() => {\n\t\tonRequestRobots()\n\t}, [])\n\n\n\tconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase()) || robot.email.toLowerCase().includes(searchfield.toLowerCase());\n\t});\n\n\treturn isPending ?\n\t\t<h1 className=\"tc\">LOADING!!</h1> :\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">ROBO FRIENDS</h1>\n\t\t\t<SearchBox onSearchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</ErrorBoundry>\n\t\t\t</Scroll>\n\t\t</div>\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS } from \"./constants\";\n\nexport const setSearchfield = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOT_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOT_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOT_FAILED, payload: error }))\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS } from \"./constants\";\n\n\nconst initialState = {\n    searchfield: ''\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const searchRobots = (state = initialState, action = {}) => {\n\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchfield: action.payload });\n        default:\n            return state;\n    }\n}\n\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOT_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOT_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOT_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from \"redux\"\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport ThunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}